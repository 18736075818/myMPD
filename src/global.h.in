/* myMPD
   (c) 2018-2019 Juergen Mang <mail@jcgames.de>
   This project's homepage is: https://github.com/jcorporation/mympd
   
   myMPD ist fork of:
   
   ympd
   (c) 2013-2014 Andrew Karpow <andy@ndyk.de>
   This project's homepage is: http://www.ympd.org
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 of the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#ifndef __GLOBAL_H__
#define __GLOBAL_H__

//architecture
#cmakedefine PKGARCH64

//myMPD version from cmake
#define MYMPD_VERSION_MAJOR ${CPACK_PACKAGE_VERSION_MAJOR}
#define MYMPD_VERSION_MINOR ${CPACK_PACKAGE_VERSION_MINOR}
#define MYMPD_VERSION_PATCH ${CPACK_PACKAGE_VERSION_PATCH}
#define MYMPD_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}"

//Webserver document root
#define DOC_ROOT "${ASSETS_PATH}"
#define ETC_PATH "${ETC_PATH}"
#define PLUGIN_PATH "${PLUGIN_PATH}"

//Max size of mpd_client response buffer
#define MAX_ELEMENTS_PER_PAGE 200
#define MAX_LIST_SIZE 1024 * MAX_ELEMENTS_PER_PAGE
#define MAX_SIZE 1024 * (MAX_ELEMENTS_PER_PAGE + 2)

//central logging definition
#cmakedefine DEBUG

enum { LOGLEVEL_ERROR, LOGLEVEL_WARN, LOGLEVEL_INFO, LOGLEVEL_VERBOSE, LOGLEVEL_DEBUG };

#define LOG_ERROR(...) mympd_log(LOGLEVEL_ERROR, __FILE__, __LINE__, __VA_ARGS__)
#define LOG_WARN(...) mympd_log(LOGLEVEL_WARN,  __FILE__, __LINE__, __VA_ARGS__)
#define LOG_INFO(...) mympd_log(LOGLEVEL_INFO, __FILE__, __LINE__, __VA_ARGS__)
#define LOG_VERBOSE(...) mympd_log(LOGLEVEL_VERBOSE, __FILE__, __LINE__, __VA_ARGS__)
#define LOG_DEBUG(...) mympd_log(LOGLEVEL_DEBUG, __FILE__, __LINE__, __VA_ARGS__)

void mympd_log(int level, const char *file, int line, const char *fmt, ...);

//check and return buffer size
#define CHECK_RETURN_LEN() do { \
    if (len > MAX_SIZE) \
        LOG_ERROR("Buffer truncated %d / %d\n", (int)len, MAX_SIZE); \
    return len; \
} while (0)


#define FREE_PTR(PTR) do { \
    if (PTR != NULL) \
        free(PTR); \
    PTR = NULL; \
} while (0)

#define REASSIGN_PTR(DEST, SRC) do { \
    FREE_PTR(DEST); \
    DEST = SRC; \
    SRC = NULL; \
} while (0);

//API cmds
#define MYMPD_CMDS(X) \
    X(MPD_API_UNKNOWN) \
    X(MPD_API_QUEUE_CLEAR) \
    X(MPD_API_QUEUE_CROP) \
    X(MPD_API_QUEUE_SAVE) \
    X(MPD_API_QUEUE_LIST) \
    X(MPD_API_QUEUE_SEARCH) \
    X(MPD_API_QUEUE_RM_TRACK) \
    X(MPD_API_QUEUE_RM_RANGE) \
    X(MPD_API_QUEUE_MOVE_TRACK) \
    X(MPD_API_QUEUE_ADD_TRACK_AFTER) \
    X(MPD_API_QUEUE_ADD_TRACK) \
    X(MPD_API_QUEUE_ADD_PLAY_TRACK) \
    X(MPD_API_QUEUE_REPLACE_TRACK) \
    X(MPD_API_QUEUE_ADD_PLAYLIST) \
    X(MPD_API_QUEUE_REPLACE_PLAYLIST) \
    X(MPD_API_QUEUE_SHUFFLE) \
    X(MPD_API_QUEUE_LAST_PLAYED) \
    X(MPD_API_QUEUE_ADD_RANDOM) \
    X(MPD_API_PLAYLIST_CLEAR) \
    X(MPD_API_PLAYLIST_RENAME) \
    X(MPD_API_PLAYLIST_MOVE_TRACK) \
    X(MPD_API_PLAYLIST_ADD_TRACK) \
    X(MPD_API_PLAYLIST_RM_TRACK) \
    X(MPD_API_PLAYLIST_RM) \
    X(MPD_API_PLAYLIST_LIST) \
    X(MPD_API_PLAYLIST_CONTENT_LIST) \
    X(MPD_API_SMARTPLS_UPDATE_ALL) \
    X(MPD_API_SMARTPLS_UPDATE) \
    X(MPD_API_SMARTPLS_SAVE) \
    X(MPD_API_SMARTPLS_GET) \
    X(MPD_API_DATABASE_SEARCH_ADV) \
    X(MPD_API_DATABASE_SEARCH) \
    X(MPD_API_DATABASE_UPDATE) \
    X(MPD_API_DATABASE_RESCAN) \
    X(MPD_API_DATABASE_FILESYSTEM_LIST) \
    X(MPD_API_DATABASE_TAG_LIST) \
    X(MPD_API_DATABASE_TAG_ALBUM_LIST) \
    X(MPD_API_DATABASE_TAG_ALBUM_TITLE_LIST) \
    X(MPD_API_DATABASE_STATS) \
    X(MPD_API_DATABASE_SONGDETAILS) \
    X(MPD_API_PLAYER_PLAY_TRACK) \
    X(MPD_API_PLAYER_VOLUME_SET) \
    X(MPD_API_PLAYER_VOLUME_GET) \
    X(MPD_API_PLAYER_PAUSE) \
    X(MPD_API_PLAYER_PLAY) \
    X(MPD_API_PLAYER_STOP) \
    X(MPD_API_PLAYER_SEEK) \
    X(MPD_API_PLAYER_NEXT) \
    X(MPD_API_PLAYER_PREV) \
    X(MPD_API_PLAYER_OUTPUT_LIST) \
    X(MPD_API_PLAYER_TOGGLE_OUTPUT) \
    X(MPD_API_PLAYER_CURRENT_SONG) \
    X(MPD_API_PLAYER_STATE) \
    X(MPD_API_SETTINGS_GET) \
    X(MPD_API_LIKE) \
    X(MPD_API_LOVE) \
    X(MYMPD_API_COLS_SAVE) \
    X(MYMPD_API_SYSCMD) \
    X(MYMPD_API_SETTINGS_GET) \
    X(MYMPD_API_SETTINGS_SET) \
    X(MYMPD_API_SETTINGS_RESET) \
    X(MYMPD_API_CONNECTION_SAVE) \
    X(MYMPD_API_BOOKMARK_LIST) \
    X(MYMPD_API_BOOKMARK_SAVE) \
    X(MYMPD_API_BOOKMARK_RM)

#define GEN_ENUM(X) X,
#define GEN_STR(X) #X,

//Global variables

int loglevel;

//signal handler
sig_atomic_t s_signal_received;

enum mympd_cmd_ids {
    MYMPD_CMDS(GEN_ENUM)
};

enum jukebox_modes {
    JUKEBOX_OFF,
    JUKEBOX_ADD_SONG,
    JUKEBOX_ADD_ALBUM,
};

//plugins
void *handle_plugins_coverextract;
bool (*plugin_coverextract)(const char *, const char *, char *, const int, char *, const int, const bool);

//message queue
tiny_queue_t *web_server_queue;
tiny_queue_t *mpd_client_queue;
tiny_queue_t *mympd_api_queue;

typedef struct t_work_request {
    int conn_id;  // needed to identify the connection where to send the reply
    char data[1000];
    int length;
    enum mympd_cmd_ids cmd_id;
} t_work_request;

typedef struct t_work_result {
    int conn_id;  // needed to identify the connection where to send the reply
    char data[MAX_SIZE];
    int length;
} t_work_result;

//myMPD configuration
typedef struct t_config {
    char *mpd_host;
    int mpd_port;
    char *mpd_pass;
    char *webport;
    bool ssl;
    char *ssl_port;
    char *ssl_cert;
    char *ssl_key;
    char *user;
    bool stickers;
    bool mixramp;
    char *taglist;
    char *searchtaglist;
    char *browsetaglist;
    bool smartpls;
    char *varlibdir;
    size_t varlibdir_len;
    char *etcdir;
    int max_elements_per_page;
    bool syscmds;
    int last_played_count;
    int loglevel;
    bool love;
    char *love_channel;
    char *love_message;
    bool plugins_coverextract;
    char *plugins_coverextractlib;
    char *music_directory;
    bool notification_web;
    bool notification_page;
    bool auto_play;
    int jukebox_mode;
    char *jukebox_playlist;
    int jukebox_queue_length;
    char *cols_queue_current;
    char *cols_search;
    char *cols_browse_database;
    char *cols_browse_playlists_detail;
    char *cols_browse_filesystem;
    char *cols_playback;
    char *cols_queue_last_played;
    bool localplayer;
    bool localplayer_autoplay;
    int stream_port;
    char *stream_url;
    bool bg_cover;
    char *bg_color;
    char *bg_css_filter;
    bool coverimage;
    char *coverimage_name;
    int coverimage_size;
    char *locale;
} t_config;

//global functions
bool testdir(const char *name, const char *dirname);
int randrange(int n);
bool validate_string(const char *data);
int copy_string(char * const dest, char const * const src, size_t const dst_len, size_t const src_len);
int replacechar(char *str, const char orig, const char rep);
enum mympd_cmd_ids get_cmd_id(const char *cmd);
void set_loglevel(t_config *config);
#endif
